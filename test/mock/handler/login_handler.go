// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler/login_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoginHandlerInterface is a mock of LoginHandlerInterface interface.
type MockLoginHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoginHandlerInterfaceMockRecorder
}

// MockLoginHandlerInterfaceMockRecorder is the mock recorder for MockLoginHandlerInterface.
type MockLoginHandlerInterfaceMockRecorder struct {
	mock *MockLoginHandlerInterface
}

// NewMockLoginHandlerInterface creates a new mock instance.
func NewMockLoginHandlerInterface(ctrl *gomock.Controller) *MockLoginHandlerInterface {
	mock := &MockLoginHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockLoginHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginHandlerInterface) EXPECT() *MockLoginHandlerInterfaceMockRecorder {
	return m.recorder
}

// LoginHandler mocks base method.
func (m *MockLoginHandlerInterface) LoginHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoginHandler", w, r)
}

// LoginHandler indicates an expected call of LoginHandler.
func (mr *MockLoginHandlerInterfaceMockRecorder) LoginHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHandler", reflect.TypeOf((*MockLoginHandlerInterface)(nil).LoginHandler), w, r)
}
