// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler/register_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegisterHandlerInterface is a mock of RegisterHandlerInterface interface.
type MockRegisterHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterHandlerInterfaceMockRecorder
}

// MockRegisterHandlerInterfaceMockRecorder is the mock recorder for MockRegisterHandlerInterface.
type MockRegisterHandlerInterfaceMockRecorder struct {
	mock *MockRegisterHandlerInterface
}

// NewMockRegisterHandlerInterface creates a new mock instance.
func NewMockRegisterHandlerInterface(ctrl *gomock.Controller) *MockRegisterHandlerInterface {
	mock := &MockRegisterHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockRegisterHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterHandlerInterface) EXPECT() *MockRegisterHandlerInterfaceMockRecorder {
	return m.recorder
}

// RegisterHandler mocks base method.
func (m *MockRegisterHandlerInterface) RegisterHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHandler", w, r)
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockRegisterHandlerInterfaceMockRecorder) RegisterHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockRegisterHandlerInterface)(nil).RegisterHandler), w, r)
}
