// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler/order_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderHandlerInterface is a mock of OrderHandlerInterface interface.
type MockOrderHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderHandlerInterfaceMockRecorder
}

// MockOrderHandlerInterfaceMockRecorder is the mock recorder for MockOrderHandlerInterface.
type MockOrderHandlerInterfaceMockRecorder struct {
	mock *MockOrderHandlerInterface
}

// NewMockOrderHandlerInterface creates a new mock instance.
func NewMockOrderHandlerInterface(ctrl *gomock.Controller) *MockOrderHandlerInterface {
	mock := &MockOrderHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockOrderHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderHandlerInterface) EXPECT() *MockOrderHandlerInterfaceMockRecorder {
	return m.recorder
}

// OrderHandler mocks base method.
func (m *MockOrderHandlerInterface) OrderHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OrderHandler", w, r)
}

// OrderHandler indicates an expected call of OrderHandler.
func (mr *MockOrderHandlerInterfaceMockRecorder) OrderHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderHandler", reflect.TypeOf((*MockOrderHandlerInterface)(nil).OrderHandler), w, r)
}
